// the nme of this module relative to DAy07 is:
// './services/array-contact-service' OR
// ./services/array-contacts-service/index

const data = require('../../../assets/data')
const service = {}
service.createNewContact = (contact) => {

    // contact must be an object with these required fields:
    // firstname, email, phone, city
    // If any of the fields are missing, an error should be thrown
    // with appropriate message. 
    // Check if a contact with email/phone already exists in the array,
    // if yes, then throw an error.
    // 'id' is autogenerated (use the max(id)+1 from the data)

    // if all is well, then contact should be appended to the data
    const req_values = ['firstname', 'email', 'phone', 'city'];
    req_values.forEach(element => {
        if (!(element in contact)) {
            throw new Error("Missing Fields");
        }
    });
    

    if (data.findIndex(c => {
        return c.firstname === contact.firstname || c.phone === contact.phone
    }) === -1) {
        const all_ids = data.map(c => c.id);
        const maxId = Math.max(...all_ids);
        contact.id = maxId + 1;
        data.push(contact)
        console.log("Contacts Added Successfully: ", contact);
        return contact;
    }
    else {
        throw new Error("similar value already exists");
    }


};
service.getAllContacts = (pageNum = 1, pageSize = 10, sortBy = 'id', sortOrder = 'asc') => {
    if ((typeof pageNum !== 'number' ||  pageNum <= 0 || (typeof pageSize !== 'number' ||  pageSize <= 0))) {
        throw new Error('pageNum or pageSize not correct');
    }
    // TODO: sort the data based on the field represented by 'sortBy' parameter
    // if the value of 'sortBy' is not a valid property of a contact, then
    // throw an error. 'sortOrder' may be 'asc' or 'desc' (any other should result
    // in an error being thrown). Based on the sortOrder the data must be sorted.

    let data_copy = [...data];
    var ret = 0;
    if (sortOrder === 'asc') {
        ret = 1;
    }
    else if (sortOrder === 'desc') {
        ret = -1;
    }
    else {
        throw new Error("bad Input");
    }

    data_copy.sort((a, b) => {

        if (sortBy in a && sortBy in b) {
            if (a[sortBy] > b[sortBy]) {
                return ret;
            }
            else {
                return -ret;
            }
        }
        else {
            throw new Error("key not Found");
        }

    })



    const begin = (pageNum - 1) * pageSize;
    const end = begin + pageSize;
    const newData = data_copy.slice(begin, end);
    return newData;
}
service.getContactById = (id) => {




    if (typeof id !== 'number' || id <= 0) {
        throw new Error('id or pageSize not correct');
    }

    const index = data.findIndex(c => c.id === id);
    if (index === -1) {
        return null;
    }
    return { ...data[index] }

};
service.updateContact = (contact) => { console.error('updateContact not implemented yet') };
service.deleteContact = (id) => {
    const index = data.findIndex(c => c.id==id);
    if(index == -1){
        throw new Error("Not a valid id");
    }
    return data.splice(index, 1);

 };

console.log("Hello");

module.exports = service;